{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "–í —Ü—å–æ–º—É –¥–æ–º–∞—à–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ –º–∏ –ø–æ–±—É–¥—É—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó —ñ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø–µ—Ä—à–∏–π submission –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è –Ω–∞ Kaggle. –£—Å—ñ –∫—Ä–æ–∫–∏ –±—É–ª–∏ —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ –≤ –ª–µ–∫—Ü—ñ—ó —Ç–∞ –º—ñ—Å—Ç—è—Ç—å—Å—è –≤ –Ω–æ—É—Ç–±—É—Ü—ñ `–õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –∑ ScikitLearn. –ü–æ–≤–Ω–∞ ML –∑–∞–¥–∞—á–∞.ipynb`, –∞–ª–µ —Ç–µ–ø–µ—Ä –º–∏ —ó—Ö –∞–¥–∞–ø—Ç—É—î–º–æ –¥–æ —ñ–Ω—à–æ—ó –∑–∞–¥–∞—á—ñ - –≤—Å–µ —è–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ, –∫–æ–ª–∏ –≤–∏ –∑–Ω–∞–π—à–ª–∏ –∫–æ–¥ —É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö —ñ –∞–¥–∞–ø—Ç—É—î—Ç–µ –Ω–∞ –ø—Ä–æ—î–∫—Ç—ñ üòâ\n",
        "\n",
        "**–ü–æ–≥–Ω–∞–ª–∏! üöÄüöÄüöÄ**\n",
        "\n",
        "-----------\n",
        "\n",
        "\n",
        "\n",
        "0. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ `train.csv`, `test.csv`, `sample_submission.csv` –∑—ñ –∑–º–∞–≥–∞–Ω–Ω—è –Ω–∞ Kaggle [\"Bank Customer Churn Prediction (DLU Course)\"](https://www.kaggle.com/t/7c080c5d8ec64364a93cf4e8f880b6a0). –î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –∑–º–∞–≥–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É \"Join\").\n",
        "\n",
        "1. –ó—á–∏—Ç–∞–π—Ç–µ –¥–∞–Ω—ñ `train.csv` –≤ pandas dataframe —Ç–∞ —Ä–æ–∑–±–∏–π—Ç–µ —ó—Ö –Ω–∞ train —ñ validation –ø—ñ–¥–Ω–∞–±–æ—Ä–∏.\n",
        "\n",
        "  * –Ñ —Ç–∞–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –º–µ—Ç–æ–¥—ñ train_test_split —è–∫ stratified. –ú–æ–∂–ª–∏–≤–æ –≤—ñ–Ω –±—É–¥–µ –í–∞–º –∫–æ—Ä–∏—Å–Ω–∏–º –ø—Ä–∏ —Ä–æ–∑–±–∏—Ç—Ç—ñ –¥–∞–Ω–∏—Ö –≤ —Ü—ñ–π –∑–∞–¥–∞—á—ñ. –ü—Ä–æ–ø–æ–Ω—É—é –í–∞–º –ø–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–æ –Ω—å–æ–≥–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å."
      ],
      "metadata": {
        "id": "gJ2A6t3mdEed"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install opendatasets --upgrade --quiet"
      ],
      "metadata": {
        "id": "Nh-eKGIMMT75"
      },
      "execution_count": 603,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import opendatasets as od\n",
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import preprocessing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, roc_curve, auc\n",
        "import joblib"
      ],
      "metadata": {
        "id": "2J2bS-kL2cHV"
      },
      "execution_count": 590,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.options.display.max_columns = None"
      ],
      "metadata": {
        "id": "-ydJH69DhNZn"
      },
      "execution_count": 604,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_url = 'https://www.kaggle.com/competitions/bank-customer-churn-prediction-dlu/data?select=train.csv'\n",
        "od.download(dataset_url)"
      ],
      "metadata": {
        "id": "lVb3sjgoMpnQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2b4573a-dee0-4b37-cfd9-cfbe0d89e25a"
      },
      "execution_count": 605,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Skipping, found downloaded files in \"./bank-customer-churn-prediction-dlu\" (use force=True to force download)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dir = './bank-customer-churn-prediction-dlu'\n",
        "os.listdir(data_dir)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y3ByO3woUvpW",
        "outputId": "7b65e493-d090-4368-faf1-8b871dbe7091"
      },
      "execution_count": 606,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['sample_submission.csv', 'test.csv', 'train.csv']"
            ]
          },
          "metadata": {},
          "execution_count": 606
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_csv = data_dir + '/train.csv'\n",
        "test_csv =  data_dir + '/test.csv'\n",
        "sample_submission_csv =  data_dir + '/sample_submission.csv'\n",
        "\n",
        "df = pd.read_csv(train_csv)\n",
        "df.head()"
      ],
      "metadata": {
        "id": "WlbY4WI-VE1O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "64a6aff2-c24c-41e1-98ec-aaa0f489e0a3"
      },
      "execution_count": 607,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  CustomerId   Surname  CreditScore Geography  Gender   Age  Tenure  \\\n",
              "0   0  15779985.0   Nwankwo        678.0    France    Male  29.0     4.0   \n",
              "1   1  15650086.0     Ch'in        687.0    France  Female  34.0     1.0   \n",
              "2   2  15733602.0  Thompson        682.0    France  Female  52.0     6.0   \n",
              "3   3  15645794.0   Macleod        753.0   Germany    Male  44.0     6.0   \n",
              "4   4  15633840.0      Hsia        544.0   Germany  Female  55.0     0.0   \n",
              "\n",
              "     Balance  NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  \\\n",
              "0       0.00            3.0        1.0             0.0        180626.36   \n",
              "1       0.00            2.0        0.0             1.0         63736.17   \n",
              "2       0.00            3.0        0.0             0.0        179655.87   \n",
              "3   83347.25            2.0        1.0             0.0        161407.48   \n",
              "4  107747.57            1.0        1.0             0.0        176580.86   \n",
              "\n",
              "   Exited  \n",
              "0     0.0  \n",
              "1     0.0  \n",
              "2     1.0  \n",
              "3     0.0  \n",
              "4     1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2496f868-62a4-4eb6-8a8f-c9e35d9a90bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>15779985.0</td>\n",
              "      <td>Nwankwo</td>\n",
              "      <td>678.0</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>29.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>180626.36</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>15650086.0</td>\n",
              "      <td>Ch'in</td>\n",
              "      <td>687.0</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>34.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>63736.17</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>15733602.0</td>\n",
              "      <td>Thompson</td>\n",
              "      <td>682.0</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>52.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>179655.87</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>15645794.0</td>\n",
              "      <td>Macleod</td>\n",
              "      <td>753.0</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>83347.25</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>161407.48</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>15633840.0</td>\n",
              "      <td>Hsia</td>\n",
              "      <td>544.0</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Female</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>107747.57</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>176580.86</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2496f868-62a4-4eb6-8a8f-c9e35d9a90bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2496f868-62a4-4eb6-8a8f-c9e35d9a90bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2496f868-62a4-4eb6-8a8f-c9e35d9a90bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ac6b942d-4222-42d4-b385-4788595d259b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac6b942d-4222-42d4-b385-4788595d259b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ac6b942d-4222-42d4-b385-4788595d259b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 15000,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4330,\n        \"min\": 0,\n        \"max\": 14999,\n        \"num_unique_values\": 15000,\n        \"samples\": [\n          11499,\n          6475,\n          13167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135205.0325605664,\n        \"min\": 1581102.0,\n        \"max\": 15815690.0,\n        \"num_unique_values\": 6348,\n        \"samples\": [\n          15676835.0,\n          15592999.0,\n          15570533.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Surname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 764,\n        \"samples\": [\n          \"Ndukaku\",\n          \"Chukwuebuka\",\n          \"Deleon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72.25592575585765,\n        \"min\": 431.0,\n        \"max\": 850.0,\n        \"num_unique_values\": 378,\n        \"samples\": [\n          507.0,\n          618.0,\n          501.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"France\",\n          \"Germany\",\n          \"Spain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.218363255923109,\n        \"min\": 18.0,\n        \"max\": 74.0,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          29.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.776678277793951,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59727.30941873363,\n        \"min\": 0.0,\n        \"max\": 209767.31,\n        \"num_unique_values\": 3395,\n        \"samples\": [\n          120811.89,\n          123763.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5323063205431138,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40817357465234033,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4999098747585218,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45734.44588762861,\n        \"min\": 11.58,\n        \"max\": 199992.48,\n        \"num_unique_values\": 6242,\n        \"samples\": [\n          113553.42,\n          136816.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exited\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4025900985800825,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 607
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df, val_df = train_test_split(df, test_size=0.25, random_state=42, stratify = df.Exited)"
      ],
      "metadata": {
        "id": "tiKheC28W4RD"
      },
      "execution_count": 608,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ä–æ–∑–º—ñ—Ä —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ —ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö —Ç–∞ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª—É –æ–∑–Ω–∞–∫–∏ Exited –≤ —Ü–∏—Ö –¥–≤–æ—Ö –Ω–∞–±–æ—Ä–∞—Ö:"
      ],
      "metadata": {
        "id": "g73Y4pr_1aIl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.shape, val_df.shape"
      ],
      "metadata": {
        "id": "8bvoqjTaXb-l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a7d4c61-861d-4c11-aff3-a5a7fbde64cb"
      },
      "execution_count": 609,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((11250, 14), (3750, 14))"
            ]
          },
          "metadata": {},
          "execution_count": 609
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.Exited.value_counts(normalize=True)"
      ],
      "metadata": {
        "id": "gvpESnmNXhpD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b66e1724-8449-4580-f2b3-09b62349f3fb"
      },
      "execution_count": 610,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Exited\n",
              "0.0    0.796533\n",
              "1.0    0.203467\n",
              "Name: proportion, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 610
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_df.Exited.value_counts(normalize=True)"
      ],
      "metadata": {
        "id": "CwQuxPChXwtj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37fef207-a009-4114-ae1e-e15062e217d0"
      },
      "execution_count": 234,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Exited\n",
              "0.0    0.796533\n",
              "1.0    0.203467\n",
              "Name: proportion, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 234
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. –í–∏–∑–Ω–∞—á—ñ—Ç—å –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫, —è–∫—ñ —Å—Ñ–æ—Ä–º—É—é—Ç—å –≤—Ö—ñ–¥–Ω—ñ –Ω–µ–∑–∞–ª–µ–∂–Ω—ñ –¥–∞–Ω—ñ, –≤ –∑–º—ñ–Ω–Ω—ñ–π `input_cols` —Ç–∞ –Ω–∞–∑–≤—É –∫–æ–ª–æ–Ω–∫–∏ , —è–∫–∞ —î —Ü—ñ–ª—å–æ–≤–æ—é, –≤ –∑–º—ñ–Ω–Ω—ñ–π `target_col`. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `input_cols` —Ç–∞ `target_col` —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–∞–±–æ—Ä–∏ –¥–∞–Ω–∏—Ö `train_inputs`, `train_targets`, `val_inputs`, `val_targets` - –¥–µ `inputs` - –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–¥–∞—Ç–∞—Ñ—Ä–µ–π–º), `targets` - –¥–∞–Ω—ñ —Ü—ñ–ª—å–æ–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø—ñ–¥–Ω–∞–±–æ—Ä—É."
      ],
      "metadata": {
        "id": "YmhrsCrThfKp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_cols = list(train_df.columns)[0:-1]\n",
        "target_col = 'Exited'"
      ],
      "metadata": {
        "id": "BB1PSRP92d2y"
      },
      "execution_count": 611,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs = train_df[input_cols].copy()\n",
        "train_targets = train_df[target_col].copy()\n",
        "val_inputs = val_df[input_cols].copy()\n",
        "val_targets = val_df[target_col].copy()"
      ],
      "metadata": {
        "id": "oqePVYwwamIW"
      },
      "execution_count": 612,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. –í–∏–∑–Ω–∞—á—ñ—Ç—å –∑ –¥–æ–ø–æ–º–æ–≥–æ—é `pandas.DataFrame.select_dtypes` –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫, —è–∫—ñ —î —á–∏—Å–ª–æ–≤–∏–º–∏ —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏–º–∏. –ó–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ `numeric_cols` —Ç–∞ `categorical_cols` –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ."
      ],
      "metadata": {
        "id": "BqhiVXa-iY5P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_cols = train_inputs.select_dtypes(include=np.number).columns.tolist()\n",
        "categorical_cols = train_inputs.select_dtypes('object').columns.tolist()\n",
        "\n",
        "display(numeric_cols, categorical_cols)\n",
        "len(numeric_cols) + len(categorical_cols) == len(input_cols)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "iithVA_KyXzT",
        "outputId": "e717dba5-8a80-4f96-f0da-21530bf5ab1e"
      },
      "execution_count": 616,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "['id',\n",
              " 'CustomerId',\n",
              " 'CreditScore',\n",
              " 'Age',\n",
              " 'Tenure',\n",
              " 'Balance',\n",
              " 'NumOfProducts',\n",
              " 'HasCrCard',\n",
              " 'IsActiveMember',\n",
              " 'EstimatedSalary']"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "['Surname', 'Geography', 'Gender']"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 616
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. –ó—Ä–æ–±—ñ—Ç—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–∏—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö —ñ —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–ª—è –≤—Ö–æ–¥—É –≤ –º–æ–¥–µ–ª—å –≤–∏—Ö–æ–¥—è—á–∏ –∑ –æ—Å–≤–æ—î–Ω–æ–≥–æ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞ –∫—É—Ä—Å—ñ. –í–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–µ–µ—Ä–¥–æ–±—Ä–æ–±–∫–∏, –∑ —è–∫–∏–º–∏ –º–∏ –≤–∂–µ –∑–Ω–∞–π–æ–º—ñ:\n",
        "  - –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫,\n",
        "  - –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∏ —î,\n",
        "  - –∫–æ–¥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –æ–∑–Ω–∞–∫, –≤–∏–ª—É—á–µ–Ω–Ω—è –æ–∑–Ω–∞–∫, —è–∫—â–æ –º–∏ –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü—ñ –¥–∞–Ω—ñ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–ª—è –º–æ–¥–µ–ª—ñ –∞–±–∏ –º–∏ –Ω–µ –±–∞—á–∏–º–æ —Å–ø–æ—Å–æ–±—É —è–∫ —ó—Ö —Ç–∞–∫ –∑–∞–∫–æ–¥—É–≤–∞—Ç–∏, –∞–±–∏ –ø–æ–¥–∞—Ç–∏ –Ω–∞ –≤—Ö—ñ–¥ –º–æ–¥–µ–ª—ñ.\n",
        "\n",
        "  –¢—É—Ç —î –±–∞–≥–∞—Ç–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, —è–∫ –í–∏ –ø–æ–±—É–¥—É—î—Ç–µ –ø–µ—Ä–µ–¥–æ–±—Ä–æ–±–∫—É, –≤–∞–∂–ª–∏–≤–æ –∞–±–∏\n",
        "  1) –ø–µ—Ä–µ–¥–æ–±—Ä–æ–±–∫–∞ –º–∞–ª–∞ —Å–µ–Ω—Å (–Ω–µ–º–∞—î —Å–µ–Ω—Å—É –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ—é, —è–∫—É –º–∏ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ –∑–≤—ñ–¥–∫–∏ –≤–∑—è–ª–∏)   \n",
        "  2) –º–∞—î –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–∞ –¥—ñ—è –ø–µ—Ä–µ–¥–æ–±—Ä–æ–±–∫–∏\n",
        "  3) –æ–±—Ä–æ–±–∫–∞ –º–∞—ç –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ —ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö, —ñ –¥–ª—è –≤–∞–ª. –¥–∞–Ω–∏—Ö\n",
        "  4) —á–∏–º –≤–∏—â–∏–π —É –í–∞—Å –≤—Ä–µ—à—Ç—ñ –≤–∏–π–¥–µ RO–° AUC —Å–∫–æ—Ä, —Ç–∏–º –±—ñ–ª—å—à–µ —à–∞–Ω—Å—ñ–≤ –ø–µ—Ä–µ–º–æ–≥—Ç–∏ —É –∑–º–∞–≥–∞–Ω–Ω—ñ :)\n",
        "\n",
        "  –û–ø–∏—à—ñ—Ç—å —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∑ –∫—Ä–æ–∫—ñ–≤ –ø–µ—Ä–µ–¥–æ–±—Ä–æ–±–∫–∏. –î–ª—è —á–æ–≥–æ –≤–∏ –π–æ–≥–æ —Ä–æ–±–∏—Ç–µ? –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –≤–∏–≤–µ–¥—ñ—Ç—å –ø–æ 5 –∑–Ω–∞—á–µ–Ω –∑ `train_inputs`, `val_inputs` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `display()`."
      ],
      "metadata": {
        "id": "gz3W57xXlIO2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å:"
      ],
      "metadata": {
        "id": "2PgsypEscEl5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "id": "Co2hJVl32fUz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f31e379-7f9b-4046-cab6-d010bc8a094b"
      },
      "execution_count": 617,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                 0\n",
              "CustomerId         0\n",
              "Surname            0\n",
              "CreditScore        0\n",
              "Geography          0\n",
              "Gender             0\n",
              "Age                0\n",
              "Tenure             0\n",
              "Balance            0\n",
              "NumOfProducts      0\n",
              "HasCrCard          0\n",
              "IsActiveMember     0\n",
              "EstimatedSalary    0\n",
              "Exited             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 617
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å."
      ],
      "metadata": {
        "id": "I7W7kUn7xJyN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**–í–∏–ª—É—á–µ–Ω–Ω—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –æ–∑–Ω–∞–∫:**\n"
      ],
      "metadata": {
        "id": "XLRwZjBsGnwx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "–í–∏–ª—É—á–∏–º–æ –∫–æ–ª–æ–Ω–∫—É Surname –∑—ñ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –æ–∑–Ω–∞–∫, –∞–¥–∂–µ –≤–∫–ª—é—á–∞—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–∞ –≤ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–æ:"
      ],
      "metadata": {
        "id": "zxr1pB5IGRqK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols.remove('Surname')\n",
        "categorical_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DO-xDDIeGLyL",
        "outputId": "ed95f747-ead3-43d8-9866-59e641adf469"
      },
      "execution_count": 618,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Geography', 'Gender']"
            ]
          },
          "metadata": {},
          "execution_count": 618
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–í–∏–ª—É—á–∏–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫:"
      ],
      "metadata": {
        "id": "6BJPdc0bGUVQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_cols = list(filter(lambda x: x not in ('id', 'CustomerId'), numeric_cols))\n",
        "numeric_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3TjgYKAYGYjL",
        "outputId": "f49a32a4-0057-49d4-ed9f-a01efb53ff16"
      },
      "execution_count": 619,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['CreditScore',\n",
              " 'Age',\n",
              " 'Tenure',\n",
              " 'Balance',\n",
              " 'NumOfProducts',\n",
              " 'HasCrCard',\n",
              " 'IsActiveMember',\n",
              " 'EstimatedSalary']"
            ]
          },
          "metadata": {},
          "execution_count": 619
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**–ö–æ–¥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –æ–∑–Ω–∞–∫:**"
      ],
      "metadata": {
        "id": "Gfuh2z5XxXZL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ú–∞—î–º–æ 2 –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω—ñ –æ–∑–Ω–∞–∫–∏: Geography, Gender.\n",
        "\n",
        "–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö:"
      ],
      "metadata": {
        "id": "ncZjL8HJxnWz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs.Gender.unique(), train_df.Geography.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M2x_cbJOwmdl",
        "outputId": "a2c8c137-9d2d-4a38-e2fb-a9421ba3e012"
      },
      "execution_count": 620,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array(['Male', 'Female'], dtype=object),\n",
              " array(['France', 'Germany', 'Spain'], dtype=object))"
            ]
          },
          "metadata": {},
          "execution_count": 620
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ú–∞—î–º–æ –Ω–µ–±–∞–≥–∞—Ç–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–æ–∂ –º–æ–∂–µ–º–æ —ó—Ö –∑–∞–∫–æ–¥—É–≤–∞—Ç–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º OneHotEncoder:"
      ],
      "metadata": {
        "id": "lScq8DA6zRlJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoder = preprocessing.OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoder.fit(train_inputs[categorical_cols])\n",
        "encoded_cols = list(encoder.get_feature_names_out(categorical_cols))\n",
        "\n",
        "train_inputs[encoded_cols] = encoder.transform(train_inputs[categorical_cols])\n",
        "val_inputs[encoded_cols] = encoder.transform(val_inputs[categorical_cols])"
      ],
      "metadata": {
        "id": "zlF4tr2iIeMZ"
      },
      "execution_count": 621,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫:**"
      ],
      "metadata": {
        "id": "ug8pbkyL2B8D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs[numeric_cols].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "czK-Wegn2HZJ",
        "outputId": "914f94b9-31ce-4da9-ccc1-9b6e21981d32"
      },
      "execution_count": 622,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        CreditScore           Age        Tenure        Balance  NumOfProducts  \\\n",
              "count  11250.000000  11250.000000  11250.000000   11250.000000   11250.000000   \n",
              "mean     658.990133     37.688267      5.023467   42952.888064       1.589689   \n",
              "std       72.120043      8.143175      2.781807   59923.385440       0.531688   \n",
              "min      431.000000     18.000000      0.000000       0.000000       1.000000   \n",
              "25%      603.000000     32.000000      3.000000       0.000000       1.000000   \n",
              "50%      661.000000     37.000000      5.000000       0.000000       2.000000   \n",
              "75%      709.000000     42.000000      7.000000  109863.192500       2.000000   \n",
              "max      850.000000     72.000000     10.000000  209767.310000       4.000000   \n",
              "\n",
              "          HasCrCard  IsActiveMember  EstimatedSalary  \n",
              "count  11250.000000    11250.000000     11250.000000  \n",
              "mean       0.792000        0.491111    117904.955965  \n",
              "std        0.405895        0.499943     45553.025877  \n",
              "min        0.000000        0.000000        11.580000  \n",
              "25%        1.000000        0.000000     83155.870000  \n",
              "50%        1.000000        0.000000    123587.945000  \n",
              "75%        1.000000        1.000000    156774.940000  \n",
              "max        1.000000        1.000000    199992.480000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d1c68032-ded3-4406-8bb5-b584fdbc5712\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "      <td>11250.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>658.990133</td>\n",
              "      <td>37.688267</td>\n",
              "      <td>5.023467</td>\n",
              "      <td>42952.888064</td>\n",
              "      <td>1.589689</td>\n",
              "      <td>0.792000</td>\n",
              "      <td>0.491111</td>\n",
              "      <td>117904.955965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>72.120043</td>\n",
              "      <td>8.143175</td>\n",
              "      <td>2.781807</td>\n",
              "      <td>59923.385440</td>\n",
              "      <td>0.531688</td>\n",
              "      <td>0.405895</td>\n",
              "      <td>0.499943</td>\n",
              "      <td>45553.025877</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>431.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.580000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>603.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>83155.870000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>661.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>123587.945000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>709.000000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>109863.192500</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>156774.940000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>850.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>209767.310000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>199992.480000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1c68032-ded3-4406-8bb5-b584fdbc5712')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d1c68032-ded3-4406-8bb5-b584fdbc5712 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d1c68032-ded3-4406-8bb5-b584fdbc5712');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-afa49348-c333-4843-ac06-1d742528d1fc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-afa49348-c333-4843-ac06-1d742528d1fc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-afa49348-c333-4843-ac06-1d742528d1fc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"train_inputs[numeric_cols]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3783.4200049519636,\n        \"min\": 72.12004264825977,\n        \"max\": 11250.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          658.9901333333333,\n          661.0,\n          11250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3965.052874224921,\n        \"min\": 8.14317471530303,\n        \"max\": 11250.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.688266666666664,\n          37.0,\n          11250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3975.8198457172166,\n        \"min\": 0.0,\n        \"max\": 11250.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.023466666666667,\n          5.0,\n          11250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73791.6497747734,\n        \"min\": 0.0,\n        \"max\": 209767.31,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11250.0,\n          42952.888064000006,\n          209767.31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3976.863562645745,\n        \"min\": 0.5316880123826689,\n        \"max\": 11250.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11250.0,\n          1.589688888888889,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3977.2131275812485,\n        \"min\": 0.0,\n        \"max\": 11250.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.792,\n          1.0,\n          0.4058948687797537\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3977.324594903645,\n        \"min\": 0.0,\n        \"max\": 11250.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4911111111111111,\n          1.0,\n          0.4999432016020255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70451.9932794792,\n        \"min\": 11.58,\n        \"max\": 199992.48,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          117904.95596533333,\n          123587.945,\n          11250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 622
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ë–∞—á–∏–º–æ, —â–æ –æ–∑–Ω–∞–∫–∏ –º–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ –∑–Ω–∞—á–µ–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ MinMaxScaler –∑ sklearn.preprocessing, —â–æ–± –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É  (0,1)."
      ],
      "metadata": {
        "id": "D698-Ses6wdd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = preprocessing.MinMaxScaler()\n",
        "scaler.fit(train_inputs[numeric_cols])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "EPh6tykc3s2-",
        "outputId": "783c3c92-871f-42bb-f075-eb784e07470e"
      },
      "execution_count": 623,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinMaxScaler()"
            ],
            "text/html": [
              "<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MinMaxScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MinMaxScaler</label><div class=\"sk-toggleable__content\"><pre>MinMaxScaler()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 623
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs[numeric_cols] = scaler.transform(train_inputs[numeric_cols])\n",
        "val_inputs[numeric_cols] = scaler.transform(val_inputs[numeric_cols])"
      ],
      "metadata": {
        "id": "9d4JazYe3-My"
      },
      "execution_count": 624,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "display(train_inputs.head(), val_inputs.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "4YyeAKN04jRx",
        "outputId": "bb23f54c-f532-43e0-971c-c3a2bce49eba"
      },
      "execution_count": 625,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          id  CustomerId      Surname  CreditScore Geography  Gender  \\\n",
              "8263    8263  15679299.0      Toscani     0.632458    France    Male   \n",
              "14199  14199  15804862.0          Kuo     0.479714   Germany  Female   \n",
              "1856    1856  15613140.0     Ejimofor     0.591885    France  Female   \n",
              "3013    3013  15651955.0      Onochie     0.653938    France    Male   \n",
              "8266    8266  15768471.0  Chukwuemeka     0.632458    France  Female   \n",
              "\n",
              "            Age  Tenure   Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "8263   0.259259     0.5  0.622726       0.000000        1.0             1.0   \n",
              "14199  0.259259     0.4  0.571232       0.000000        1.0             0.0   \n",
              "1856   0.074074     0.4  0.000000       0.333333        1.0             1.0   \n",
              "3013   0.555556     0.3  0.000000       0.333333        1.0             0.0   \n",
              "8266   0.314815     0.7  0.000000       0.333333        1.0             0.0   \n",
              "\n",
              "       EstimatedSalary  Geography_France  Geography_Germany  Geography_Spain  \\\n",
              "8263          0.433916               1.0                0.0              0.0   \n",
              "14199         0.888712               0.0                1.0              0.0   \n",
              "1856          0.813017               1.0                0.0              0.0   \n",
              "3013          0.599071               1.0                0.0              0.0   \n",
              "8266          0.502109               1.0                0.0              0.0   \n",
              "\n",
              "       Gender_Female  Gender_Male  \n",
              "8263             0.0          1.0  \n",
              "14199            1.0          0.0  \n",
              "1856             1.0          0.0  \n",
              "3013             0.0          1.0  \n",
              "8266             1.0          0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c49a062f-78ba-4b14-b1a7-db753b8504d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8263</th>\n",
              "      <td>8263</td>\n",
              "      <td>15679299.0</td>\n",
              "      <td>Toscani</td>\n",
              "      <td>0.632458</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.259259</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.622726</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.433916</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14199</th>\n",
              "      <td>14199</td>\n",
              "      <td>15804862.0</td>\n",
              "      <td>Kuo</td>\n",
              "      <td>0.479714</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.259259</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.571232</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.888712</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1856</th>\n",
              "      <td>1856</td>\n",
              "      <td>15613140.0</td>\n",
              "      <td>Ejimofor</td>\n",
              "      <td>0.591885</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.074074</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.813017</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3013</th>\n",
              "      <td>3013</td>\n",
              "      <td>15651955.0</td>\n",
              "      <td>Onochie</td>\n",
              "      <td>0.653938</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.555556</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.599071</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8266</th>\n",
              "      <td>8266</td>\n",
              "      <td>15768471.0</td>\n",
              "      <td>Chukwuemeka</td>\n",
              "      <td>0.632458</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.314815</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.502109</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c49a062f-78ba-4b14-b1a7-db753b8504d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c49a062f-78ba-4b14-b1a7-db753b8504d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c49a062f-78ba-4b14-b1a7-db753b8504d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b180df9c-af2b-42ab-8592-cf4f84fc8902\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b180df9c-af2b-42ab-8592-cf4f84fc8902')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b180df9c-af2b-42ab-8592-cf4f84fc8902 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(train_inputs\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4932,\n        \"min\": 1856,\n        \"max\": 14199,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          14199,\n          8266,\n          1856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 80472.01470884148,\n        \"min\": 15613140.0,\n        \"max\": 15804862.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15804862.0,\n          15768471.0,\n          15613140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Surname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Kuo\",\n          \"Chukwuemeka\",\n          \"Ejimofor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06987991835480627,\n        \"min\": 0.4797136038186156,\n        \"max\": 0.6539379474940334,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.4797136038186156,\n          0.6539379474940334,\n          0.6324582338902147\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Germany\",\n          \"France\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17292766711005558,\n        \"min\": 0.07407407407407407,\n        \"max\": 0.5555555555555556,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.07407407407407407,\n          0.3148148148148148\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15165750888103102,\n        \"min\": 0.30000000000000004,\n        \"max\": 0.7000000000000001,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.4,\n          0.7000000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3274853977571981,\n        \"min\": 0.0,\n        \"max\": 0.6227264867914833,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.6227264867914833,\n          0.5712317615170829\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18257418583505536,\n        \"min\": 0.0,\n        \"max\": 0.3333333333333333,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3333333333333333,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1966477610136146,\n        \"min\": 0.43391558893874366,\n        \"max\": 0.8887121720124271,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8887121720124271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_France\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44721359549995804,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_Germany\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44721359549995804,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_Spain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          id  CustomerId  Surname  CreditScore Geography  Gender       Age  \\\n",
              "1855    1855  15751177.0   Bitter     0.267303    France    Male  0.203704   \n",
              "1273    1273  15685536.0     Ting     0.398568   Germany    Male  0.425926   \n",
              "5414    5414  15710456.0  Maclean     0.453461    France    Male  0.240741   \n",
              "10923  10923  15610355.0   Chiang     0.396181    France    Male  0.703704   \n",
              "5835    5835  15778947.0   Oluchi     0.758950     Spain  Female  0.444444   \n",
              "\n",
              "       Tenure   Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "1855      0.9  0.570579            0.0        0.0             0.0   \n",
              "1273      0.3  0.590481            0.0        1.0             0.0   \n",
              "5414      0.7  0.000000            0.0        1.0             1.0   \n",
              "10923     0.3  0.000000            1.0        1.0             0.0   \n",
              "5835      0.5  0.000000            0.0        1.0             1.0   \n",
              "\n",
              "       EstimatedSalary  Geography_France  Geography_Germany  Geography_Spain  \\\n",
              "1855          0.279047               1.0                0.0              0.0   \n",
              "1273          0.884371               0.0                1.0              0.0   \n",
              "5414          0.751226               1.0                0.0              0.0   \n",
              "10923         0.514675               1.0                0.0              0.0   \n",
              "5835          0.909003               0.0                0.0              1.0   \n",
              "\n",
              "       Gender_Female  Gender_Male  \n",
              "1855             0.0          1.0  \n",
              "1273             0.0          1.0  \n",
              "5414             0.0          1.0  \n",
              "10923            0.0          1.0  \n",
              "5835             1.0          0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-baf7910a-3c0d-4acc-8e54-86076de3a30f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1855</th>\n",
              "      <td>1855</td>\n",
              "      <td>15751177.0</td>\n",
              "      <td>Bitter</td>\n",
              "      <td>0.267303</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.203704</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.570579</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.279047</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1273</th>\n",
              "      <td>1273</td>\n",
              "      <td>15685536.0</td>\n",
              "      <td>Ting</td>\n",
              "      <td>0.398568</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.425926</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.590481</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.884371</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5414</th>\n",
              "      <td>5414</td>\n",
              "      <td>15710456.0</td>\n",
              "      <td>Maclean</td>\n",
              "      <td>0.453461</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.240741</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.751226</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10923</th>\n",
              "      <td>10923</td>\n",
              "      <td>15610355.0</td>\n",
              "      <td>Chiang</td>\n",
              "      <td>0.396181</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.703704</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.514675</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5835</th>\n",
              "      <td>5835</td>\n",
              "      <td>15778947.0</td>\n",
              "      <td>Oluchi</td>\n",
              "      <td>0.758950</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.909003</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-baf7910a-3c0d-4acc-8e54-86076de3a30f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-baf7910a-3c0d-4acc-8e54-86076de3a30f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-baf7910a-3c0d-4acc-8e54-86076de3a30f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0d3661cd-ce30-4f7d-b4ee-782d6fef9018\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d3661cd-ce30-4f7d-b4ee-782d6fef9018')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0d3661cd-ce30-4f7d-b4ee-782d6fef9018 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(train_inputs\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3863,\n        \"min\": 1273,\n        \"max\": 10923,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1273,\n          5835,\n          5414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65077.739333046906,\n        \"min\": 15610355.0,\n        \"max\": 15778947.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15685536.0,\n          15778947.0,\n          15710456.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Surname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Ting\",\n          \"Oluchi\",\n          \"Maclean\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18320900993624678,\n        \"min\": 0.26730310262529833,\n        \"max\": 0.7589498806682577,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3985680190930787,\n          0.7589498806682577,\n          0.45346062052505953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"France\",\n          \"Germany\",\n          \"Spain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19919247125222012,\n        \"min\": 0.20370370370370366,\n        \"max\": 0.7037037037037037,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4259259259259259,\n          0.44444444444444436\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2607680962081059,\n        \"min\": 0.30000000000000004,\n        \"max\": 0.9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.30000000000000004,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31804724586105726,\n        \"min\": 0.0,\n        \"max\": 0.590481138362312,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.5705789429249009,\n          0.590481138362312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.447213595499958,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44721359549995804,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2676836477464167,\n        \"min\": 0.27904684897407706,\n        \"max\": 0.9090032098065364,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8843710074312097,\n          0.9090032098065364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_France\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_Germany\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44721359549995804,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography_Spain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.447213595499958,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.447213595499958,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4472135954999579,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –¥–∞–Ω—ñ, —â–æ –º—ñ—Å—Ç—è—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω–∏—Ö `train_inputs`, `train_targets`, `val_inputs`, `val_targets` –Ω–∞ –¥–∏—Å–∫ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ `parquet`. –í –∫—ñ–Ω—Ü—ñ –≤–∏–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –≤ –ø–∞–ø—Ü—ñ, –≤ —è–∫—É –í–∏ –∑–±–µ—Ä–µ–≥–ª–∏ —Ñ–∞–π–ª–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–≥–ª–∏—Å—å. –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –º–æ–∂–Ω–∞ –∑ `os.listdir(your_dir)` –∞–±–æ `!ls your_dir`"
      ],
      "metadata": {
        "id": "Gk-NVTdyoAtu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7A1FJhk664p",
        "outputId": "3c4d473d-c5b2-4b4b-9630-3ea87530b565"
      },
      "execution_count": 586,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir = '/content/drive/MyDrive/Machine Learning/Data/'\n",
        "os.chdir(dir)"
      ],
      "metadata": {
        "id": "wD6ZXfD7-sff"
      },
      "execution_count": 587,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs.to_parquet('train_inputs.parquet')\n",
        "pd.DataFrame(train_targets).to_parquet('train_targets.parquet')\n",
        "val_inputs.to_parquet('val_inputs.parquet')\n",
        "pd.DataFrame(val_targets).to_parquet('val_targets.parquet')"
      ],
      "metadata": {
        "id": "Jd11VCV88gvJ"
      },
      "execution_count": 626,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "os.listdir(dir)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15Tr1p5b-kgJ",
        "outputId": "606c80f0-28a6-4086-9b4d-f63b8add2965"
      },
      "execution_count": 627,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['application_data.csv.zip',\n",
              " 'application_data_processed.zip',\n",
              " 'medical-charges.csv',\n",
              " 'cars.csv',\n",
              " 'train_inputs.parquet',\n",
              " 'train_targets.parquet',\n",
              " 'val_inputs.parquet',\n",
              " 'val_targets.parquet',\n",
              " 'bank-customer-churn-prediction-dlu',\n",
              " 'submission_log_reg.csv',\n",
              " 'customer_churn.joblib',\n",
              " 'log_reg.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 627
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. –ó –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—Ö –≤—Ö—ñ–∂–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä—ñ—Ç—å `X_train`, `X_val` –Ω–∞–±–æ—Ä–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –ª–∏—à–µ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ –ø—ñ–¥—É—Ç—å –Ω–∞ –≤—Ö—ñ–¥ –º–æ–¥–µ–ª—ñ. –ù–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å –±—ñ–Ω–∞—Ä–Ω–æ—ó –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –¥–æ–ø–æ–º–æ–≥–æ—é `LogisticRegression` –≤ `scikit-learn`."
      ],
      "metadata": {
        "id": "D5_3RjSdowGF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_cols = numeric_cols + encoded_cols\n",
        "X_cols"
      ],
      "metadata": {
        "id": "VZUkPF-e2irB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db318002-a7f0-4896-e77f-4dc8d98ed0f3"
      },
      "execution_count": 629,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['CreditScore',\n",
              " 'Age',\n",
              " 'Tenure',\n",
              " 'Balance',\n",
              " 'NumOfProducts',\n",
              " 'HasCrCard',\n",
              " 'IsActiveMember',\n",
              " 'EstimatedSalary',\n",
              " 'Geography_France',\n",
              " 'Geography_Germany',\n",
              " 'Geography_Spain',\n",
              " 'Gender_Female',\n",
              " 'Gender_Male']"
            ]
          },
          "metadata": {},
          "execution_count": 629
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = train_inputs[X_cols]\n",
        "X_val = val_inputs[X_cols]"
      ],
      "metadata": {
        "id": "nMjRE6foyH9V"
      },
      "execution_count": 630,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LogisticRegression(solver='sag')\n",
        "model.fit(X_train, train_targets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "nDuoEJvGwisK",
        "outputId": "0298e052-d775-4f75-f1eb-e2d608d3bd99"
      },
      "execution_count": 631,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(solver='sag')"
            ],
            "text/html": [
              "<style>#sk-container-id-20 {color: black;background-color: white;}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: white;}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-20 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-20\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(solver=&#x27;sag&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(solver=&#x27;sag&#x27;)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 631
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. –í–∏–≤–µ–¥—ñ—Ç—å Confusion matrix, ROC Curve, –º–µ—Ç—Ä–∏–∫—É AUROC —Ç–∞ –º–µ—Ç—Ä–∏–∫—É F1 Score –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó 0.5 –¥–ª—è –ø–æ–±—É–¥–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –©–æ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ —è–∫—ñ—Å—Ç –º–æ–¥–µ–ª—ñ? –í–æ–Ω–∞ —Ö–æ—Ä–æ—à–∞, –ø–æ–≥–∞–Ω–∞, –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞?"
      ],
      "metadata": {
        "id": "37s-m8G2pL4J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_and_plot(model, inputs, targets, name=''):\n",
        "    preds = model.predict(inputs)\n",
        "\n",
        "    accuracy = accuracy_score(targets, preds)\n",
        "    print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n",
        "\n",
        "    cm_abs = confusion_matrix(targets, preds)\n",
        "    cm_percentage = confusion_matrix(targets, preds, normalize='true')\n",
        "\n",
        "    plt.figure()\n",
        "    ax = sns.heatmap(cm_percentage, annot=True)\n",
        "\n",
        "    threshold = cm_abs.max() / 2\n",
        "    for i in range(cm_abs.shape[0]):\n",
        "        for j in range(cm_abs.shape[1]):\n",
        "            ax.text(j + 0.5, i + 0.6, f'\\n({cm_abs[i, j]})',\n",
        "                    ha='center', va='center', fontsize=10,\n",
        "                    color=\"white\" if cm_abs[i, j] < threshold else \"black\")\n",
        "\n",
        "    plt.xlabel('Prediction')\n",
        "    plt.ylabel('Target')\n",
        "    plt.title('{} Confusion Matrix'.format(name))\n",
        "    plt.show()\n",
        "\n",
        "    return preds"
      ],
      "metadata": {
        "id": "lZ3PRjpQNxw0"
      },
      "execution_count": 632,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_preds = predict_and_plot(model, X_train, train_targets, 'Training')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "CdioOhEsF_Xa",
        "outputId": "d31300b9-a9c4-4eb7-b627-b3697b9306d8"
      },
      "execution_count": 633,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 87.48%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_preds = predict_and_plot(model, X_val, val_targets, 'Validation')"
      ],
      "metadata": {
        "id": "I02ENkyJ2jhn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "outputId": "1909fcac-a3f2-4b1b-b320-5dbb80425a07"
      },
      "execution_count": 634,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 87.15%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1_score(train_targets, train_preds, pos_label=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bxJyYZbcHihX",
        "outputId": "509b356e-ee22-4398-ee8a-9a98846a5e03"
      },
      "execution_count": 635,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6375096475430924"
            ]
          },
          "metadata": {},
          "execution_count": 635
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1_score(val_targets, val_preds, pos_label=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrBhFvtoID_x",
        "outputId": "d55044e1-c548-4413-c8f5-54aac0398728"
      },
      "execution_count": 636,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6359516616314199"
            ]
          },
          "metadata": {},
          "execution_count": 636
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_auroc_and_build_roc(model, inputs, targets, name=''):\n",
        "  # Predict probabilities\n",
        "  y_pred_proba = model.predict_proba(inputs)[:, 1]\n",
        "\n",
        "  # Compute ROC curve\n",
        "  fpr, tpr, thresholds = roc_curve(targets, y_pred_proba, pos_label=1)\n",
        "\n",
        "    # Compute AUROC\n",
        "  roc_auc = auc(fpr, tpr)\n",
        "  #print(f'AUROC for {name}: {roc_auc:.2f}')\n",
        "  print(f'AUROC for {name}: {roc_auc}')\n",
        "\n",
        "  # Plot the ROC curve\n",
        "  plt.figure()\n",
        "  plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n",
        "  plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "  plt.xlim([0.0, 1.0])\n",
        "  plt.ylim([0.0, 1.05])\n",
        "  plt.xlabel('False Positive Rate')\n",
        "  plt.ylabel('True Positive Rate')\n",
        "  plt.title(f'Receiver Operating Characteristic (ROC) Curve for {name}')\n",
        "  plt.legend(loc=\"lower right\")\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "Pcmzw2DmcDKY"
      },
      "execution_count": 637,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "compute_auroc_and_build_roc(model, X_train, train_targets, 'Training')\n",
        "compute_auroc_and_build_roc(model, X_val, val_targets, 'Validation')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 962
        },
        "id": "sDxPGdJxcIe2",
        "outputId": "10e4d51e-3e44-4b55-9307-8502507e0af9"
      },
      "execution_count": 638,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUROC for Training: 0.8826508969575407\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUROC for Validation: 0.8799195816208374\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–æ–º—É –Ω–∞–±–æ—Ä–∞—Ö –ø–µ—Ä–µ–≤–∏—â—É—î 87%, —â–æ —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ —Ç–µ, —â–æ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –¥–æ–±—Ä–µ —É–∑–∞–≥–∞–ª—å–Ω—é—î –¥–∞–Ω—ñ, —è–∫—ñ –≤–æ–Ω–∞ —Ä–∞–Ω—ñ—à–µ –Ω–µ –±–∞—á–∏–ª–∞. –ê–ª–µ –≤–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–∏—à–µ –≤ 54-55% –≤–∏–ø–∞–¥–∫—ñ–≤. –ü–æ–¥–∏–≤–∏–º–æ—Å—å, —á–∏ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —ó—ó —Ç–æ—á–Ω—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –ø—Ä–∏–π–æ–º–∏ feature engineering."
      ],
      "metadata": {
        "id": "Im7KEu_-cpKF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–≥–µ–Ω–µ—Ä—É—î–º–æ –¥–µ—è–∫—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —è–∫—ñ –º–æ–∂–ª–∏–≤–æ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –º–æ–¥–µ–ª—ñ –∫—Ä–∞—â–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏.\n",
        "\n",
        "Balance to Salary Ratio: –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ.\n",
        "\n",
        "Credit Score to Age Ratio: –ö–ª—ñ—î–Ω—Ç–∏ —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–∫–æ–≤–∏—Ö –≥—Ä—É–ø –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º –∫—Ä–µ–¥–∏—Ç–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –º–æ–∂—É—Ç—å –º–∞—Ç–∏ —Ä—ñ–∑–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.\n",
        "\n",
        "Tenure to Age Ratio: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—î –ª–æ—è–ª—å–Ω—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –±–∞–Ω–∫—É.\n",
        "\n",
        "HasCrCard IsActive: –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –º–∞—é—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É –∫–∞—Ä—Ç–∫—É.\n",
        "\n",
        "AgeGroup, CreditScoreGroup: –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è continuos –∑–Ω–∞—á–µ–Ω—å –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "rZnnSH66zIUo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_inputs2 = train_df[input_cols].copy()\n",
        "val_inputs2 = val_df[input_cols].copy()"
      ],
      "metadata": {
        "id": "zpo-KH3mqSDi"
      },
      "execution_count": 639,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_continuous_features(df):\n",
        "  df['BalanceSalaryRatio'] = df['Balance'] / df['EstimatedSalary']\n",
        "  df['CreditScoreAgeRatio'] = df['CreditScore'] / (df['Age'])\n",
        "  df['TenureAgeRatio'] = df['Tenure'] / (df['Age'])\n",
        "  df['HasCrCard_IsActive'] = df['HasCrCard'] * df['IsActiveMember']\n",
        "  df['NumOfProducts_Balance'] = df['NumOfProducts'] * df['Balance']"
      ],
      "metadata": {
        "id": "CW9r6S-xSDF1"
      },
      "execution_count": 640,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_categorical_features(df):\n",
        "  age_bins = [18, 30, 40, 50, 60, 100]\n",
        "  age_labels = ['18-30', '30-40', '40-50', '50-60', '60+']\n",
        "  df['AgeGroup'] = pd.cut(df['Age'], bins=age_bins, labels=age_labels, right=False)\n",
        "\n",
        "  credit_bins = [300, 579, 669, 739, 799, 850]\n",
        "  credit_labels = ['Low', 'Medium', 'High', 'Very High', 'Excellent']\n",
        "  df['CreditScoreGroup'] = pd.cut(df['CreditScore'], bins=credit_bins, labels=credit_labels, right=True)"
      ],
      "metadata": {
        "id": "BUAsj6xQnUG3"
      },
      "execution_count": 641,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "create_continuous_features(train_inputs2)\n",
        "create_categorical_features(train_inputs2)"
      ],
      "metadata": {
        "id": "wWkGjul2xb4m"
      },
      "execution_count": 642,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "create_continuous_features(val_inputs2)\n",
        "create_categorical_features(val_inputs2)"
      ],
      "metadata": {
        "id": "Ut-D3Vvuxjjd"
      },
      "execution_count": 643,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_cols = train_inputs2.select_dtypes(include=np.number).columns.tolist()\n",
        "numeric_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G4UQJ6rcVB6l",
        "outputId": "8af59314-9192-45a6-d2c3-77f027b3d7d4"
      },
      "execution_count": 644,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['id',\n",
              " 'CustomerId',\n",
              " 'CreditScore',\n",
              " 'Age',\n",
              " 'Tenure',\n",
              " 'Balance',\n",
              " 'NumOfProducts',\n",
              " 'HasCrCard',\n",
              " 'IsActiveMember',\n",
              " 'EstimatedSalary',\n",
              " 'BalanceSalaryRatio',\n",
              " 'CreditScoreAgeRatio',\n",
              " 'TenureAgeRatio',\n",
              " 'HasCrCard_IsActive',\n",
              " 'NumOfProducts_Balance']"
            ]
          },
          "metadata": {},
          "execution_count": 644
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_cols = list(filter(lambda x: x not in ('id', 'CustomerId'), numeric_cols))\n",
        "numeric_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EfJCIocDVJ3p",
        "outputId": "5e389553-b910-45cb-9cde-3da0a38c8493"
      },
      "execution_count": 645,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['CreditScore',\n",
              " 'Age',\n",
              " 'Tenure',\n",
              " 'Balance',\n",
              " 'NumOfProducts',\n",
              " 'HasCrCard',\n",
              " 'IsActiveMember',\n",
              " 'EstimatedSalary',\n",
              " 'BalanceSalaryRatio',\n",
              " 'CreditScoreAgeRatio',\n",
              " 'TenureAgeRatio',\n",
              " 'HasCrCard_IsActive',\n",
              " 'NumOfProducts_Balance']"
            ]
          },
          "metadata": {},
          "execution_count": 645
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols = train_inputs2.select_dtypes(['object', 'category']).columns.tolist()\n",
        "categorical_cols.remove('Surname')\n",
        "categorical_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PJoBQtHKVVxZ",
        "outputId": "0d51c59f-037b-4c4e-844f-2ff70303453d"
      },
      "execution_count": 646,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Geography', 'Gender', 'AgeGroup', 'CreditScoreGroup']"
            ]
          },
          "metadata": {},
          "execution_count": 646
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder2 = preprocessing.OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoder2.fit(train_inputs2[categorical_cols])\n",
        "encoded_cols = list(encoder2.get_feature_names_out(categorical_cols))\n",
        "\n",
        "train_inputs2[encoded_cols] = encoder2.transform(train_inputs2[categorical_cols])\n",
        "val_inputs2[encoded_cols] = encoder2.transform(val_inputs2[categorical_cols])"
      ],
      "metadata": {
        "id": "nqK9vZu2oRw-"
      },
      "execution_count": 647,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler2 = preprocessing.StandardScaler()\n",
        "scaler2.fit(train_inputs2[numeric_cols])\n",
        "\n",
        "train_inputs2[numeric_cols] = scaler2.transform(train_inputs2[numeric_cols])\n",
        "val_inputs2[numeric_cols] = scaler2.transform(val_inputs2[numeric_cols])"
      ],
      "metadata": {
        "id": "6sUFgG5Or4Ag"
      },
      "execution_count": 648,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "display(train_inputs2.head(), val_inputs2.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "kLehfujUr5uu",
        "outputId": "602db4e1-663d-49e3-b011-e9354644768d"
      },
      "execution_count": 650,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          id  CustomerId      Surname  CreditScore Geography  Gender  \\\n",
              "8263    8263  15679299.0      Toscani     0.513193    France    Male   \n",
              "14199  14199  15804862.0          Kuo    -0.374256   Germany  Female   \n",
              "1856    1856  15613140.0     Ejimofor     0.277465    France  Female   \n",
              "3013    3013  15651955.0      Onochie     0.637991    France    Male   \n",
              "8266    8266  15768471.0  Chukwuemeka     0.513193    France  Female   \n",
              "\n",
              "            Age    Tenure   Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "8263  -0.698563 -0.008436  1.463179      -1.109137   0.512471        1.017939   \n",
              "14199 -0.698563 -0.367931  1.282909      -1.109137   0.512471       -0.982377   \n",
              "1856  -1.926640 -0.367931 -0.716829       0.771748   0.512471        1.017939   \n",
              "3013   1.266360 -0.727425 -0.716829       0.771748   0.512471       -0.982377   \n",
              "8266  -0.330140  0.710553 -0.716829       0.771748   0.512471       -0.982377   \n",
              "\n",
              "       EstimatedSalary  BalanceSalaryRatio  CreditScoreAgeRatio  \\\n",
              "8263         -0.683158           -0.009136             0.787223   \n",
              "14199         1.313519           -0.014975             0.332573   \n",
              "1856          0.981199           -0.019711             2.858981   \n",
              "3013          0.041916           -0.019711            -0.818261   \n",
              "8266         -0.383769           -0.019711             0.363424   \n",
              "\n",
              "       TenureAgeRatio  HasCrCard_IsActive  NumOfProducts_Balance AgeGroup  \\\n",
              "8263         0.199289            1.261101               0.912336    30-40   \n",
              "14199       -0.172493           -0.792958               0.783218    30-40   \n",
              "1856         0.503474            1.261101              -0.649084    18-30   \n",
              "3013        -0.916056           -0.792958              -0.649084    40-50   \n",
              "8266         0.719783           -0.792958              -0.649084    30-40   \n",
              "\n",
              "      CreditScoreGroup  Geography_France  Geography_Germany  Geography_Spain  \\\n",
              "8263              High               1.0                0.0              0.0   \n",
              "14199           Medium               0.0                1.0              0.0   \n",
              "1856              High               1.0                0.0              0.0   \n",
              "3013              High               1.0                0.0              0.0   \n",
              "8266              High               1.0                0.0              0.0   \n",
              "\n",
              "       Gender_Female  Gender_Male  AgeGroup_18-30  AgeGroup_30-40  \\\n",
              "8263             0.0          1.0             0.0             1.0   \n",
              "14199            1.0          0.0             0.0             1.0   \n",
              "1856             1.0          0.0             1.0             0.0   \n",
              "3013             0.0          1.0             0.0             0.0   \n",
              "8266             1.0          0.0             0.0             1.0   \n",
              "\n",
              "       AgeGroup_40-50  AgeGroup_50-60  AgeGroup_60+  \\\n",
              "8263              0.0             0.0           0.0   \n",
              "14199             0.0             0.0           0.0   \n",
              "1856              0.0             0.0           0.0   \n",
              "3013              1.0             0.0           0.0   \n",
              "8266              0.0             0.0           0.0   \n",
              "\n",
              "       CreditScoreGroup_Excellent  CreditScoreGroup_High  \\\n",
              "8263                          0.0                    1.0   \n",
              "14199                         0.0                    0.0   \n",
              "1856                          0.0                    1.0   \n",
              "3013                          0.0                    1.0   \n",
              "8266                          0.0                    1.0   \n",
              "\n",
              "       CreditScoreGroup_Low  CreditScoreGroup_Medium  \\\n",
              "8263                    0.0                      0.0   \n",
              "14199                   0.0                      1.0   \n",
              "1856                    0.0                      0.0   \n",
              "3013                    0.0                      0.0   \n",
              "8266                    0.0                      0.0   \n",
              "\n",
              "       CreditScoreGroup_Very High  \n",
              "8263                          0.0  \n",
              "14199                         0.0  \n",
              "1856                          0.0  \n",
              "3013                          0.0  \n",
              "8266                          0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9030278-db32-4095-8c8b-18441f7ac899\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>BalanceSalaryRatio</th>\n",
              "      <th>CreditScoreAgeRatio</th>\n",
              "      <th>TenureAgeRatio</th>\n",
              "      <th>HasCrCard_IsActive</th>\n",
              "      <th>NumOfProducts_Balance</th>\n",
              "      <th>AgeGroup</th>\n",
              "      <th>CreditScoreGroup</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "      <th>AgeGroup_18-30</th>\n",
              "      <th>AgeGroup_30-40</th>\n",
              "      <th>AgeGroup_40-50</th>\n",
              "      <th>AgeGroup_50-60</th>\n",
              "      <th>AgeGroup_60+</th>\n",
              "      <th>CreditScoreGroup_Excellent</th>\n",
              "      <th>CreditScoreGroup_High</th>\n",
              "      <th>CreditScoreGroup_Low</th>\n",
              "      <th>CreditScoreGroup_Medium</th>\n",
              "      <th>CreditScoreGroup_Very High</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8263</th>\n",
              "      <td>8263</td>\n",
              "      <td>15679299.0</td>\n",
              "      <td>Toscani</td>\n",
              "      <td>0.513193</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>-0.698563</td>\n",
              "      <td>-0.008436</td>\n",
              "      <td>1.463179</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>1.017939</td>\n",
              "      <td>-0.683158</td>\n",
              "      <td>-0.009136</td>\n",
              "      <td>0.787223</td>\n",
              "      <td>0.199289</td>\n",
              "      <td>1.261101</td>\n",
              "      <td>0.912336</td>\n",
              "      <td>30-40</td>\n",
              "      <td>High</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14199</th>\n",
              "      <td>14199</td>\n",
              "      <td>15804862.0</td>\n",
              "      <td>Kuo</td>\n",
              "      <td>-0.374256</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Female</td>\n",
              "      <td>-0.698563</td>\n",
              "      <td>-0.367931</td>\n",
              "      <td>1.282909</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>1.313519</td>\n",
              "      <td>-0.014975</td>\n",
              "      <td>0.332573</td>\n",
              "      <td>-0.172493</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>0.783218</td>\n",
              "      <td>30-40</td>\n",
              "      <td>Medium</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1856</th>\n",
              "      <td>1856</td>\n",
              "      <td>15613140.0</td>\n",
              "      <td>Ejimofor</td>\n",
              "      <td>0.277465</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>-1.926640</td>\n",
              "      <td>-0.367931</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>0.771748</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>1.017939</td>\n",
              "      <td>0.981199</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>2.858981</td>\n",
              "      <td>0.503474</td>\n",
              "      <td>1.261101</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>18-30</td>\n",
              "      <td>High</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3013</th>\n",
              "      <td>3013</td>\n",
              "      <td>15651955.0</td>\n",
              "      <td>Onochie</td>\n",
              "      <td>0.637991</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>1.266360</td>\n",
              "      <td>-0.727425</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>0.771748</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>0.041916</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>-0.818261</td>\n",
              "      <td>-0.916056</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>40-50</td>\n",
              "      <td>High</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8266</th>\n",
              "      <td>8266</td>\n",
              "      <td>15768471.0</td>\n",
              "      <td>Chukwuemeka</td>\n",
              "      <td>0.513193</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>-0.330140</td>\n",
              "      <td>0.710553</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>0.771748</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>-0.383769</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>0.363424</td>\n",
              "      <td>0.719783</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>30-40</td>\n",
              "      <td>High</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9030278-db32-4095-8c8b-18441f7ac899')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9030278-db32-4095-8c8b-18441f7ac899 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9030278-db32-4095-8c8b-18441f7ac899');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0eb766dd-5556-40d2-b1e5-f8d1a5f181d4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0eb766dd-5556-40d2-b1e5-f8d1a5f181d4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0eb766dd-5556-40d2-b1e5-f8d1a5f181d4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          id  CustomerId  Surname  CreditScore Geography  Gender       Age  \\\n",
              "1855    1855  15751177.0   Bitter    -1.608364    France    Male -1.066986   \n",
              "1273    1273  15685536.0     Ting    -0.845713   Germany    Male  0.406706   \n",
              "5414    5414  15710456.0  Maclean    -0.526786    France    Male -0.821371   \n",
              "10923  10923  15610355.0   Chiang    -0.859579    France    Male  2.248822   \n",
              "5835    5835  15778947.0   Oluchi     1.248112     Spain  Female  0.529514   \n",
              "\n",
              "         Tenure   Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "1855   1.429542  1.280624      -1.109137  -1.951331       -0.982377   \n",
              "1273  -0.727425  1.350297      -1.109137   0.512471       -0.982377   \n",
              "5414   0.710553 -0.716829      -1.109137   0.512471        1.017939   \n",
              "10923 -0.727425 -0.716829       4.533520   0.512471       -0.982377   \n",
              "5835  -0.008436 -0.716829      -1.109137   0.512471        1.017939   \n",
              "\n",
              "       EstimatedSalary  BalanceSalaryRatio  CreditScoreAgeRatio  \\\n",
              "1855         -1.363073           -0.004645             0.099368   \n",
              "1273          1.294460           -0.014791            -0.841479   \n",
              "5414          0.709918           -0.019711             0.396737   \n",
              "10923        -0.328604           -0.019711            -1.733650   \n",
              "5835          1.402602           -0.019711            -0.103134   \n",
              "\n",
              "       TenureAgeRatio  HasCrCard_IsActive  NumOfProducts_Balance AgeGroup  \\\n",
              "1855         2.032557           -0.792958               0.781581    18-30   \n",
              "1273        -0.789106           -0.792958               0.831484    40-50   \n",
              "5414         1.026803            1.261101              -0.649084    30-40   \n",
              "10923       -1.022279           -0.792958              -0.649084    50-60   \n",
              "5835        -0.243309            1.261101              -0.649084    40-50   \n",
              "\n",
              "      CreditScoreGroup  Geography_France  Geography_Germany  Geography_Spain  \\\n",
              "1855               Low               1.0                0.0              0.0   \n",
              "1273            Medium               0.0                1.0              0.0   \n",
              "5414            Medium               1.0                0.0              0.0   \n",
              "10923           Medium               1.0                0.0              0.0   \n",
              "5835         Very High               0.0                0.0              1.0   \n",
              "\n",
              "       Gender_Female  Gender_Male  AgeGroup_18-30  AgeGroup_30-40  \\\n",
              "1855             0.0          1.0             1.0             0.0   \n",
              "1273             0.0          1.0             0.0             0.0   \n",
              "5414             0.0          1.0             0.0             1.0   \n",
              "10923            0.0          1.0             0.0             0.0   \n",
              "5835             1.0          0.0             0.0             0.0   \n",
              "\n",
              "       AgeGroup_40-50  AgeGroup_50-60  AgeGroup_60+  \\\n",
              "1855              0.0             0.0           0.0   \n",
              "1273              1.0             0.0           0.0   \n",
              "5414              0.0             0.0           0.0   \n",
              "10923             0.0             1.0           0.0   \n",
              "5835              1.0             0.0           0.0   \n",
              "\n",
              "       CreditScoreGroup_Excellent  CreditScoreGroup_High  \\\n",
              "1855                          0.0                    0.0   \n",
              "1273                          0.0                    0.0   \n",
              "5414                          0.0                    0.0   \n",
              "10923                         0.0                    0.0   \n",
              "5835                          0.0                    0.0   \n",
              "\n",
              "       CreditScoreGroup_Low  CreditScoreGroup_Medium  \\\n",
              "1855                    1.0                      0.0   \n",
              "1273                    0.0                      1.0   \n",
              "5414                    0.0                      1.0   \n",
              "10923                   0.0                      1.0   \n",
              "5835                    0.0                      0.0   \n",
              "\n",
              "       CreditScoreGroup_Very High  \n",
              "1855                          0.0  \n",
              "1273                          0.0  \n",
              "5414                          0.0  \n",
              "10923                         0.0  \n",
              "5835                          1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b721c32-3976-4b10-a777-2cb63a6685f8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>BalanceSalaryRatio</th>\n",
              "      <th>CreditScoreAgeRatio</th>\n",
              "      <th>TenureAgeRatio</th>\n",
              "      <th>HasCrCard_IsActive</th>\n",
              "      <th>NumOfProducts_Balance</th>\n",
              "      <th>AgeGroup</th>\n",
              "      <th>CreditScoreGroup</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "      <th>AgeGroup_18-30</th>\n",
              "      <th>AgeGroup_30-40</th>\n",
              "      <th>AgeGroup_40-50</th>\n",
              "      <th>AgeGroup_50-60</th>\n",
              "      <th>AgeGroup_60+</th>\n",
              "      <th>CreditScoreGroup_Excellent</th>\n",
              "      <th>CreditScoreGroup_High</th>\n",
              "      <th>CreditScoreGroup_Low</th>\n",
              "      <th>CreditScoreGroup_Medium</th>\n",
              "      <th>CreditScoreGroup_Very High</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1855</th>\n",
              "      <td>1855</td>\n",
              "      <td>15751177.0</td>\n",
              "      <td>Bitter</td>\n",
              "      <td>-1.608364</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>-1.066986</td>\n",
              "      <td>1.429542</td>\n",
              "      <td>1.280624</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>-1.951331</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>-1.363073</td>\n",
              "      <td>-0.004645</td>\n",
              "      <td>0.099368</td>\n",
              "      <td>2.032557</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>0.781581</td>\n",
              "      <td>18-30</td>\n",
              "      <td>Low</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1273</th>\n",
              "      <td>1273</td>\n",
              "      <td>15685536.0</td>\n",
              "      <td>Ting</td>\n",
              "      <td>-0.845713</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.406706</td>\n",
              "      <td>-0.727425</td>\n",
              "      <td>1.350297</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>1.294460</td>\n",
              "      <td>-0.014791</td>\n",
              "      <td>-0.841479</td>\n",
              "      <td>-0.789106</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>0.831484</td>\n",
              "      <td>40-50</td>\n",
              "      <td>Medium</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5414</th>\n",
              "      <td>5414</td>\n",
              "      <td>15710456.0</td>\n",
              "      <td>Maclean</td>\n",
              "      <td>-0.526786</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>-0.821371</td>\n",
              "      <td>0.710553</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>1.017939</td>\n",
              "      <td>0.709918</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>0.396737</td>\n",
              "      <td>1.026803</td>\n",
              "      <td>1.261101</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>30-40</td>\n",
              "      <td>Medium</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10923</th>\n",
              "      <td>10923</td>\n",
              "      <td>15610355.0</td>\n",
              "      <td>Chiang</td>\n",
              "      <td>-0.859579</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>2.248822</td>\n",
              "      <td>-0.727425</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>4.533520</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>-0.982377</td>\n",
              "      <td>-0.328604</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>-1.733650</td>\n",
              "      <td>-1.022279</td>\n",
              "      <td>-0.792958</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>50-60</td>\n",
              "      <td>Medium</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5835</th>\n",
              "      <td>5835</td>\n",
              "      <td>15778947.0</td>\n",
              "      <td>Oluchi</td>\n",
              "      <td>1.248112</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.529514</td>\n",
              "      <td>-0.008436</td>\n",
              "      <td>-0.716829</td>\n",
              "      <td>-1.109137</td>\n",
              "      <td>0.512471</td>\n",
              "      <td>1.017939</td>\n",
              "      <td>1.402602</td>\n",
              "      <td>-0.019711</td>\n",
              "      <td>-0.103134</td>\n",
              "      <td>-0.243309</td>\n",
              "      <td>1.261101</td>\n",
              "      <td>-0.649084</td>\n",
              "      <td>40-50</td>\n",
              "      <td>Very High</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b721c32-3976-4b10-a777-2cb63a6685f8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b721c32-3976-4b10-a777-2cb63a6685f8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b721c32-3976-4b10-a777-2cb63a6685f8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7e8e96c6-edfd-4388-8202-163b10160313\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e8e96c6-edfd-4388-8202-163b10160313')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7e8e96c6-edfd-4388-8202-163b10160313 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_cols2 = numeric_cols + encoded_cols\n",
        "X_train2 = train_inputs2[X_cols2]\n",
        "X_val2 = val_inputs2[X_cols2]"
      ],
      "metadata": {
        "id": "wMuQaIJ3se8U"
      },
      "execution_count": 651,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = LogisticRegression(solver='sag')\n",
        "model2.fit(X_train2, train_targets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "1DO3KMqksbn9",
        "outputId": "a0d35207-9fd8-4f13-9c4b-68eb076baa1a"
      },
      "execution_count": 658,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(solver='sag')"
            ],
            "text/html": [
              "<style>#sk-container-id-22 {color: black;background-color: white;}#sk-container-id-22 pre{padding: 0;}#sk-container-id-22 div.sk-toggleable {background-color: white;}#sk-container-id-22 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-22 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-22 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-22 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-22 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-22 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-22 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-22 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-22 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-22 div.sk-item {position: relative;z-index: 1;}#sk-container-id-22 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-22 div.sk-item::before, #sk-container-id-22 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-22 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-22 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-22 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-22 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-22 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-22 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-22 div.sk-label-container {text-align: center;}#sk-container-id-22 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-22 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-22\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(solver=&#x27;sag&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" checked><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(solver=&#x27;sag&#x27;)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 658
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_preds2 = predict_and_plot(model2, X_train2, train_targets, 'Training')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "iHf94J2LxHNU",
        "outputId": "041a0b7b-6248-4ff0-a758-62e4edb2c88e"
      },
      "execution_count": 659,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 88.23%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_preds2 = predict_and_plot(model2, X_val2, val_targets, 'Validation')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "uWPXBHCr1mL1",
        "outputId": "ba31c01f-33df-4b61-ae1b-813e7578996d"
      },
      "execution_count": 660,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 88.08%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "compute_auroc_and_build_roc(model2, X_train2, train_targets, 'Training')\n",
        "compute_auroc_and_build_roc(model2, X_val2, val_targets, 'Validation')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 962
        },
        "id": "JVOV2UUl5FT2",
        "outputId": "57eebc4c-f852-48eb-f73d-08d462c88caa"
      },
      "execution_count": 661,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUROC for Training: 0.8943048145770647\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUROC for Validation: 0.8944960710040581\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1_score(train_targets, train_preds2, pos_label=1)"
      ],
      "metadata": {
        "id": "WY1vn2-yvogg",
        "outputId": "a9f27eb7-25e1-44fd-d0ac-cc286d7994b0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 662,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6745329400196657"
            ]
          },
          "metadata": {},
          "execution_count": 662
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1_score(val_targets, val_preds2, pos_label=1)"
      ],
      "metadata": {
        "id": "B1ESWO-xvqsq",
        "outputId": "7719af3f-c3f8-4686-ce0b-7f00cc2385cc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 663,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.671565025716385"
            ]
          },
          "metadata": {},
          "execution_count": 663
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –∑–±—ñ–ª—å—à–∏–ª–∞—Å—å –Ω–µ –¥—É–∂–µ –∑–Ω–∞—á–Ω–æ, –æ–¥–Ω–∞–∫ —Ç–µ–ø–µ—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è –≤–∂–µ –≤ 60% –≤–∏–ø–∞–¥–∫—ñ–≤."
      ],
      "metadata": {
        "id": "ASpUENGIvT7Y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ, —è–∫–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –∑–∞–≤–∂–¥–∏ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–∏–π –∫–ª–∞—Å (—Ç–æ–π, —è–∫–æ–≥–æ –±—ñ–ª—å—à–µ –≤ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö). –ü–æ—Ä–∞—Ö—É–π—Ç–µ Accuracy –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ —ñ —Ç–æ—ó, —â–æ –º–∏ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞–ª–∏ –≤ –ø.6. –ó—Ä–æ–±—ñ—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ —è–∫—ñ—Å—Ç—å –Ω–∞—à–æ—ó –º–æ–¥–µ–ª—ñ: —è–∫—ñ—Å—Ç—å —Ö–æ—Ä–æ—à–∞, –ø–æ–≥–∞–Ω–∞, –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞?"
      ],
      "metadata": {
        "id": "3aLarTs4rWIJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_no(inputs):\n",
        "    return np.full(len(inputs), 0)"
      ],
      "metadata": {
        "id": "0szMoWzd2k_Y"
      },
      "execution_count": 664,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(train_targets, predict_no(X_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22zfmvQwG60u",
        "outputId": "ee2b2dae-c180-438c-8b6d-3f420b8c675f"
      },
      "execution_count": 665,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7965333333333333"
            ]
          },
          "metadata": {},
          "execution_count": 665
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(val_targets, predict_no(X_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LmwfqcFPHFdK",
        "outputId": "0e44139d-236a-4117-8131-b14e818d67ad"
      },
      "execution_count": 666,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7965333333333333"
            ]
          },
          "metadata": {},
          "execution_count": 666
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "–í –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ –∑ —Ü—ñ—î—é –º–æ–¥–µ–ª–ª—é, –Ω–∞—à–∞ –º–æ–¥–µ–ª—å —î –∑–Ω–∞—á–Ω–æ –∫—Ä–∞—â–æ—é, —ñ—ñ Accuracy –≤–∏—â–µ –Ω–∞ ~8.5%, –ø—Ä–∏ —Ü—å–æ–º—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é 95% –ø—Ä–æ—Ç–∏ 100% —É –±–∞–∑–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ, –∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π - –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é 60% –ø—Ä–æ—Ç–∏ 0% —É –±–∞–∑–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ."
      ],
      "metadata": {
        "id": "EwgQagB5BvTF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –º–æ–¥–µ–ª—å —ñ —ñ–Ω—à—ñ –æ–± º—î–∫—Ç–∏, —è–∫—ñ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –∑–±–µ—Ä–µ–≥—Ç–∏, –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ joblib –≤ —Ñ–∞–π–ª `log_reg.joblib`. –ü–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–µ–ª—å –∑ —Ñ–∞–π–ª—É –≤ –∑–º—ñ–Ω–Ω—É `model_2` (—Ü–∏–º –º–∏ —Ç—Ä–µ–Ω—É—î–º–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –∑ —Ñ–∞–π–ª—É –Ω–∞ –º–∞–π–±—É—Ç–Ω—î)."
      ],
      "metadata": {
        "id": "l_3QF-hAuFgA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "customer_churn = {\n",
        "    'model': model2,\n",
        "    'scaler': scaler2,\n",
        "    'encoder': encoder2,\n",
        "    'input_cols': input_cols,\n",
        "    'target_col': target_col,\n",
        "    'numeric_cols': numeric_cols,\n",
        "    'categorical_cols': categorical_cols,\n",
        "    'encoded_cols': encoded_cols\n",
        "}"
      ],
      "metadata": {
        "id": "FpeQ2qLm2oBU"
      },
      "execution_count": 599,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "joblib.dump(customer_churn, 'log_reg.joblib')"
      ],
      "metadata": {
        "id": "hFhsYWfT9G6z",
        "outputId": "686a5dec-b886-46d2-e592-b024687b8abb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 600,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['log_reg.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 600
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model3 = joblib.load('log_reg.joblib')"
      ],
      "metadata": {
        "id": "GkJSKYZg9QZM"
      },
      "execution_count": 601,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "val_preds3 = model3['model'].predict(X_val2)\n",
        "accuracy_score(val_targets, val_preds3)"
      ],
      "metadata": {
        "id": "ocZ1VgoM9Wcg",
        "outputId": "2b3a45ab-c479-40c1-b629-19073de4edb6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 602,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8808"
            ]
          },
          "metadata": {},
          "execution_count": 602
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —Ä–æ–±–æ—Ç–æ—é –Ω–∞–≤–µ–¥–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó `predict_raw_df`. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–±–∏—Ç—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–∏—Ö (–º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —ñ –∫–æ–¥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –Ω–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ –∫–ª–∞—Å—É 1 –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ –Ω–∞–¥–∞–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ.\n",
        "\n",
        "–î–æ–ø–æ–≤–Ω—ñ—Ç—å –∞–±–æ –≤–Ω–µ—Å—ñ—Ç—å –∑–º—ñ–Ω–∏ —É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞—à–æ–≥–æ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö."
      ],
      "metadata": {
        "id": "E_b1hrHUvQpb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_columns(df):\n",
        "  numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n",
        "  numeric_cols = list(filter(lambda x: x not in ('id', 'CustomerId'), numeric_cols))\n",
        "  categorical_cols = df.select_dtypes(['object', 'category']).columns.tolist()\n",
        "  categorical_cols.remove('Surname')\n",
        "  return numeric_cols, categorical_cols"
      ],
      "metadata": {
        "id": "zYTlGGSsyOhC"
      },
      "execution_count": 667,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "def predict_raw_df(model, scaler, encoder, numeric_cols, categorical_cols, input_df: pd.DataFrame):\n",
        "    numeric_cols, categorical_cols = get_columns(input_df)\n",
        "    input_df[encoded_cols] = encoder.transform(input_df[categorical_cols])\n",
        "    input_df[numeric_cols] = scaler.transform(input_df[numeric_cols])\n",
        "    X_input = input_df[numeric_cols + encoded_cols]\n",
        "    prob = model.predict_proba(X_input)[:,1]\n",
        "    return prob"
      ],
      "metadata": {
        "id": "n8bLQDa3viLC"
      },
      "execution_count": 668,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. –ó—á–∏—Ç–∞–π—Ç–µ –¥–∞–Ω—ñ –∑ `test.csv` –≤ –∑–º—ñ–Ω–Ω—É `test_raw_df`. –ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–∞–Ω–∏—Ö –∑ —Ñ—É–Ω–∫—Ü—ñ—î—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –∑–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤—É –∫–æ–ª–æ–Ω–∫—É `Exited` –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ñ `test_raw_df`."
      ],
      "metadata": {
        "id": "W8rRDFfExV40"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_raw_df = pd.read_csv(test_csv)\n",
        "create_continuous_features(test_raw_df)\n",
        "create_categorical_features(test_raw_df)\n",
        "prob = predict_raw_df(model2, scaler2, encoder2, numeric_cols, categorical_cols, test_raw_df)\n",
        "test_raw_df['Exited'] = prob"
      ],
      "metadata": {
        "id": "LyWEdGWx2u6d"
      },
      "execution_count": 675,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_raw_df[['id', 'Exited']].head()"
      ],
      "metadata": {
        "id": "E9g5V0lBG3uq",
        "outputId": "fdd2e10b-1124-4b5a-eece-95d6250a8532",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "execution_count": 678,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id    Exited\n",
              "0  15000  0.038364\n",
              "1  15001  0.016727\n",
              "2  15002  0.161424\n",
              "3  15003  0.294417\n",
              "4  15004  0.059287"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1be76b6f-d00f-44bd-a286-d2acb051d6b3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15000</td>\n",
              "      <td>0.038364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15001</td>\n",
              "      <td>0.016727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15002</td>\n",
              "      <td>0.161424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15003</td>\n",
              "      <td>0.294417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15004</td>\n",
              "      <td>0.059287</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1be76b6f-d00f-44bd-a286-d2acb051d6b3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1be76b6f-d00f-44bd-a286-d2acb051d6b3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1be76b6f-d00f-44bd-a286-d2acb051d6b3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5211e63e-a3de-485d-87a2-e1ad9e02180c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5211e63e-a3de-485d-87a2-e1ad9e02180c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5211e63e-a3de-485d-87a2-e1ad9e02180c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"test_raw_df[['id', 'Exited']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 15000,\n        \"max\": 15004,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15001,\n          15004,\n          15002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exited\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.115082292898448,\n        \"min\": 0.016727283356607645,\n        \"max\": 0.2944172662775951,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.016727283356607645,\n          0.05928722417097607,\n          0.16142372450206807\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 678
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. –ó—á–∏—Ç–∞–π—Ç–µ —Ñ–∞–π–ª 'sample_submission.csv' —ñ –∑–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–ª–æ–Ω–∫—É `Exited` –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–º–∏ –≤–∞—à–æ—é –º–æ–¥–µ–ª–ª—é –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ `id` –∫–ª—ñ—î–Ω—Ç–∞.\n",
        "–í–∏–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É, –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª `submission_log_reg.csv` (–£–í–ê–ì–ê! –Ω–µ –∑–∞–ø–∏—à—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–æ —â–µ —ñ–Ω–¥–µ–∫—Å–∏ —Ä—è–¥–∫—ñ–≤!) —ñ –∑–¥–∞–π—Ç–µ —Ü–µ–π —Ñ–∞–π–ª –Ω–∞ Kaggle –∑—ñ —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—è –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ `Submit Prediction`."
      ],
      "metadata": {
        "id": "ZHZciHxEx7IZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "submission = pd.read_csv(sample_submission_csv)\n",
        "submission.Exited = prob\n",
        "submission.head()"
      ],
      "metadata": {
        "id": "HjkKnrll2wNA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "60b98d4b-79c6-465b-eaa7-0094be773690"
      },
      "execution_count": 670,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id    Exited\n",
              "0  15000  0.038364\n",
              "1  15001  0.016727\n",
              "2  15002  0.161424\n",
              "3  15003  0.294417\n",
              "4  15004  0.059287"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c9ba7e0-ff58-4ca8-8164-68399d773bb0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15000</td>\n",
              "      <td>0.038364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15001</td>\n",
              "      <td>0.016727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15002</td>\n",
              "      <td>0.161424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15003</td>\n",
              "      <td>0.294417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15004</td>\n",
              "      <td>0.059287</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c9ba7e0-ff58-4ca8-8164-68399d773bb0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c9ba7e0-ff58-4ca8-8164-68399d773bb0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c9ba7e0-ff58-4ca8-8164-68399d773bb0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4ba87995-7eb5-4db1-a5cb-ce4e73ce34e2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ba87995-7eb5-4db1-a5cb-ce4e73ce34e2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4ba87995-7eb5-4db1-a5cb-ce4e73ce34e2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "submission",
              "summary": "{\n  \"name\": \"submission\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2886,\n        \"min\": 15000,\n        \"max\": 24999,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          21252,\n          19684,\n          16731\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exited\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2715923057851761,\n        \"min\": 0.00048080527292673276,\n        \"max\": 0.9863260596736573,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          0.05966236233361305,\n          0.13153034731242583,\n          0.030441600588574237\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 670
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission.to_csv('submission_log_reg.csv', index=False)"
      ],
      "metadata": {
        "id": "9MoVr2oE4wMl"
      },
      "execution_count": 589,
      "outputs": []
    }
  ]
}